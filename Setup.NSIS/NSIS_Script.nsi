; Script generated by the HM NIS Edit Script Wizard.

; HM NIS Edit Wizard helper defines
!define VersionHeader ".\Assembly_Version.nsh"
!define PROCESS_NAME "CloudPlexMediaCaptionEditor.exe"
!define PRODUCT_NAME "CloudPlex Media Caption Editor"
#!define PRODUCT_VERSION "1.0.0.0
!define PRODUCT_PUBLISHER "Megazone Cloud"
!define PRODUCT_WEB_SITE "http://www.megazone.com"
!define MCM_WEB_SITE "https://console.media.megazone.io"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PROCESS_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define COMPANY_NAME "Megazone"

!addplugindir "Plugins"
!include "LogicLib.nsh"
!include "WinVer.nsh"
!include "LangFile.nsh"
; Add extension plugin-header --------
!include "DotNetCheckerForceInstallVer.nsh"
!include "NTProfiles.nsh"
!include /NONFATAL "${VersionHeader}"

; MUI 1.67 compatible ------
!include "MUI2.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "Resources\Logo.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\win-uninstall.ico"

; Language Selection Dialog Settings
!define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"
#!define MUI_LANGDLL_ALLLANGUAGES ; 모든 언어 표시.

; Welcome page
!define MUI_PAGE_CUSTOMFUNCTION_SHOW "WelcomeShowCallback"
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE "WelcomeLeaveCallback"
!insertmacro MUI_PAGE_WELCOME
; License page
!define MUI_LICENSEPAGE_CHECKBOX
;!insertmacro MUI_PAGE_LICENSE "Resources\License.rtf"
!insertmacro MUI_PAGE_LICENSE $(license)
; Components page
#!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!define MUI_PAGE_CUSTOMFUNCTION_PRE "CanDirectoryPageSkip"
!insertmacro MUI_PAGE_DIRECTORY
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
;!define MUI_FINISHPAGE_RUN "$INSTDIR\${PROCESS_NAME}"
!define MUI_FINISHPAGE_RUN
!define MUI_FINISHPAGE_RUN_TEXT "프로그램 바로 실행하기"
!define MUI_FINISHPAGE_RUN_FUNCTION "LaunchLink"
!define MUI_PAGE_CUSTOMFUNCTION_SHOW "FinishShowCallback"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_WELCOME
!define MUI_PAGE_CUSTOMFUNCTION_SHOW "un.UnPageConfirmShow"
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE "un.UnPageConfirmLeave"
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_UNPAGE_FINISH

; Language files
!insertmacro MUI_LANGUAGE "English"
#!insertmacro MUI_LANGUAGE "Japanese"
!insertmacro MUI_LANGUAGE "Korean"

!include "Resources.nsh"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "Setup.exe"
InstallDir "$PROGRAMFILES64\${COMPANY_NAME}\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show
BrandingText "${PRODUCT_PUBLISHER}."

LicenseLangString license ${LANG_ENGLISH} "Resources\License_en.rtf"
;LicenseLangString license ${LANG_JAPANESE} "Resources\License_jp.rtf"
LicenseLangString license ${LANG_KOREAN} "Resources\License_ko.rtf"
LicenseData $(license)

;--------------------------------
#Setup File Version Information
  VIProductVersion ${PRODUCT_VERSION}"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "ProductVersion" "${PRODUCT_VERSION}"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "ProductName" "${PRODUCT_NAME}"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "Comments" " ${PRODUCT_NAME} "
  VIAddVersionKey /LANG=${LANG_ENGLISH} "CompanyName" "Megazone Corp."
#  VIAddVersionKey /LANG=${LANG_ENGLISH} "LegalTrademarks" "${PRODUCT_NAME} is a trademark of ${PRODUCT_PUBLISHER}."
  VIAddVersionKey /LANG=${LANG_ENGLISH} "LegalCopyright" "Copyright ⓒ 2017. Megazone Corp."
  VIAddVersionKey /LANG=${LANG_ENGLISH} "FileDescription" "${PRODUCT_NAME} Setup Lanuncher"
  VIAddVersionKey /LANG=${LANG_ENGLISH} "FileVersion" "${PRODUCT_VERSION}"
;--------------------------------

; Utility Function Start---------------------------------------------------

; Version Compare Macro ---------------------------------------------------
Function LaunchLink
  ;RequestExecutionLevel user
  ;ExecShell "runas" "$INSTDIR\${PROCESS_NAME}"
  ExecShell "open" "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk"
FunctionEnd

Function VersionCompare
	!define VersionCompare `!insertmacro VersionCompareCall`

	!macro VersionCompareCall _VER1 _VER2 _RESULT
		Push `${_VER1}`
		Push `${_VER2}`
		Call VersionCompare
		Pop ${_RESULT}
	!macroend

	Exch $1
	Exch
	Exch $0
	Exch
	Push $2
	Push $3
	Push $4
	Push $5
	Push $6
	Push $7

	begin:
	StrCpy $2 -1
	IntOp $2 $2 + 1
	StrCpy $3 $0 1 $2
	StrCmp $3 '' +2
	StrCmp $3 '.' 0 -3
	StrCpy $4 $0 $2
	IntOp $2 $2 + 1
	StrCpy $0 $0 '' $2

	StrCpy $2 -1
	IntOp $2 $2 + 1
	StrCpy $3 $1 1 $2
	StrCmp $3 '' +2
	StrCmp $3 '.' 0 -3
	StrCpy $5 $1 $2
	IntOp $2 $2 + 1
	StrCpy $1 $1 '' $2

	StrCmp $4$5 '' equal

	StrCpy $6 -1
	IntOp $6 $6 + 1
	StrCpy $3 $4 1 $6
	StrCmp $3 '0' -2
	StrCmp $3 '' 0 +2
	StrCpy $4 0

	StrCpy $7 -1
	IntOp $7 $7 + 1
	StrCpy $3 $5 1 $7
	StrCmp $3 '0' -2
	StrCmp $3 '' 0 +2
	StrCpy $5 0

	StrCmp $4 0 0 +2
	StrCmp $5 0 begin newer2
	StrCmp $5 0 newer1
	IntCmp $6 $7 0 newer1 newer2

	StrCpy $4 '1$4'
	StrCpy $5 '1$5'
	IntCmp $4 $5 begin newer2 newer1

	equal:
	StrCpy $0 0
	goto end
	newer1:
	StrCpy $0 1
	goto end
	newer2:
	StrCpy $0 2

	end:
	Pop $7
	Pop $6
	Pop $5
	Pop $4
	Pop $3
	Pop $2
	Pop $1
	Exch $0
FunctionEnd
;--------------------------------------------------------------------------

;----------------------------------------------------------------------
; 64bit Environment
Function CheckOS64
  Var /GLOBAL IsWow64
  StrCpy $IsWow64 "False"

  ; 64비트 여부 체크하기
  System::Call "kernel32::GetCurrentProcess() i .s"
  System::Call "kernel32::IsWow64Process(i s, *i .r0)"
  StrCmp $0 '0' Win32 Win64

  Win32:
;    MessageBox MB_OK 'Windows x32'
    Goto End
  Win64:
;    MessageBox MB_OK 'Windows x64'
    StrCpy $IsWow64 "True"
    SetRegView 64 ;64비트 os에, 32비트용 프로그램이 접근 하기 위해서 사용
  End:
FunctionEnd
;----------------------------------------------------------------------
; 64bit Environment
Function un.CheckOS64
  ; 64비트 여부 체크하기
  System::Call "kernel32::GetCurrentProcess() i .s"
  System::Call "kernel32::IsWow64Process(i s, *i .r0)"
  StrCmp $0 '0' Win32 Win64

  Win32:
;    MessageBox MB_OK 'Windows x32'
    Goto End
  Win64:
;    MessageBox MB_OK 'Windows x64'
    SetRegView 64 ;64비트 os에, 32비트용 프로그램이 접근 하기 위해서 사용
  End:
FunctionEnd
;----------------------------------------------------------------------
; Windows Version
; .Net 4.6.1 설치 환경 확인.
Function CheckWindowsVersion
  ; MS official : Windows Server 2008 R2 SP1, Windows7
  ; (실제로는, Vista까지는 .Net 4.6.1이 설치가능함.)
  ; Window vista 이상에서만 실행 가능.
  ; Window XP, Window Server 2003이하는 안됨.
  ; Windows OS Version Info.
  ; https://msdn.microsoft.com/ko-kr/library/windows/desktop/ms724832(v=vs.85).aspx
  ; Windows vista : 6.0
  ; Windows 7 : 6.1
  Var /GLOBAL Major
  Var /GLOBAL Minor
  File /oname=$TEMP\nsisos.dll nsisos.dll
  CallInstDLL $TEMP\nsisos.dll osversion
  StrCpy $Major $0
  StrCpy $Minor $1

  StrCpy $R0 "FALSE"
  ${If} $Major > 6
    StrCpy $R0 "TRUE"
  ${ElseIf} $Major == 6
    ${If} $Minor >= 1
      StrCpy $R0 "TRUE"
    ${EndIf}
  ${EndIf}
  Delete $TEMP\nsisos.dll
FunctionEnd

;----------------------------------------------------------------------

!define FindProc_NOT_FOUND 1
!define FindProc_FOUND 0
!macro FindProc result processName
    StrLen $0 ${processName}
	
	; tasklist 에서 프로세스 출려해 줄 때 process name 이 25자가 넘어가면 name이 잘림
	; 이를 해결하고자 find로 찾을 때 쓰이는 process name 은 25자가 넘을 경우 잘라서 사용 하도록 함
    StrCpy $1 ""
    ${If} $0 > 25
      StrCpy $1 ${processName} 25
    ${Else}
      StrCpy $1 ${processName} $0
    ${EndIf}

    ExecCmd::exec "%SystemRoot%\System32\tasklist /NH /FI $\"IMAGENAME eq ${processName}$\" | %SystemRoot%\System32\find /I $\"$1$\""
    Pop $0 ; The handle for the process
    ExecCmd::wait $0
    Pop ${result} ; The exit code
!macroend

; Process Runtime check.
Function CheckProcessRuntime

  Var /GLOBAL processFound
  StrCpy $processFound "1"
  
  !insertmacro FindProc $processFound "${PROCESS_NAME}"

  IntCmp $processFound ${FindProc_NOT_FOUND} Equal Less More
  Equal:
    Goto End
  Less:
    Goto IntallStop
  More:
    Goto IntallStop
  IntallStop:
    ; MSG_PROCESS_CLOSE: "${PRODUCT_NAME}가 실행중입니다. ${PRODUCT_NAME}를 종료하십시오."
    MessageBox MB_OK|MB_ICONEXCLAMATION "$(MSG_PROCESS_CLOSE)" /SD IDOK
    Abort
  End:
FunctionEnd

Function un.CheckProcessRuntime
  !insertmacro FindProc $processFound "${PROCESS_NAME}"

  IntCmp $processFound ${FindProc_NOT_FOUND} Equal Less More
  Equal:
    Goto End
  Less:
    Goto IntallStop
  More:
    Goto IntallStop
  IntallStop:
    MessageBox MB_OK|MB_ICONEXCLAMATION "$(MSG_PROCESS_CLOSE)" /SD IDOK
    Abort
  End:
FunctionEnd

;----------------------------------------------------------------------
; Language Code
Function GetWindowLocalLanguageCode
  # $LANGUAGE : 인스트롤러에서 선택한 Language code.

  System::Call 'kernel32::GetUserDefaultUILanguage() i.r10'
  ${Switch} $R0
  ${Case} 1033
    StrCpy $R0 "en-US"
    ${Break}
  ${Case} 1041
    StrCpy $R0 "ja-JP"
    ${Break}
  ${Case} 1042
    StrCpy $R0 "ko-KR"
    ${Break}
  ${Default}
    StrCpy $R0 "en-US"
    ${Break}
  ${EndSwitch}
FunctionEnd

;----------------------------------------------------------------------
/*
[Root Key]
HKCR or HKEY_CLASSES_ROOT
HKLM or HKEY_LOCAL_MACHINE
HKCU or HKEY_CURRENT_USER
HKU or HKEY_USERS
HKCC or HKEY_CURRENT_CONFIG
HKDD or HKEY_DYN_DATA
HKPD or HKEY_PERFORMANCE_DATA
SHCTX or SHELL_CONTEXT
*/
  
; Registry SubKey
!define PRODUCT_REGISTRY_SUBKEY "SOFTWARE\${COMPANY_NAME}\${PRODUCT_NAME}"

!define REGISTRY_REGKEY_Culture "Culture"                  #언어 Language
!define REGISTRY_REGKEY_InstallPath "InstallPath"          #설치 경로
!define REGISTRY_REGKEY_InstalledVersion "Version"         #설치버전 정보

; Custom Url Scheme
!define CUSTOM_URL_SCHEME_REGISTRY_SUBKEY "Megazone.CloudMediaCaptionEditor.v1"

; 레지스트리 등록.
Function WriteRegistry
  Var /GLOBAL RegValue_Culture

  Call GetWindowLocalLanguageCode
  Pop $R0
  # default value setting.
  StrCpy $RegValue_Culture $R0

  # install default infomation.
  WriteRegStr "HKLM" "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_Culture}" "$RegValue_Culture"
  WriteRegStr "HKLM" "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_InstallPath}" $INSTDIR
  WriteRegStr "HKLM" "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_InstalledVersion}" "${PRODUCT_VERSION}"

  # .net framework > WebBrowser emulator version 수정. .Net WebBrowser 컨트롤은 기본적으로 IE7을 기준으로 렌더링함.
  # IE7에서는 HTML5 대응이 안되, 메가존 로그인 페이지가 랜더링 되지 않음. IE 버전을 올려서, HTML5에 대응하도록 수정함.
  # HTML5 대응하기 위한 최소 IE 버전은 IE10 이다.
  # 참고자료 : https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/general-info/ee330730(v=vs.85)?redirectedfrom=MSDN#browser_emulation
  # 32bit
  WriteRegDWORD "HKLM" "SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION" "${PROCESS_NAME}" 10001
  # 64bit
  WriteRegDWORD "HKLM" "SOFTWARE\WOW6432Node\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION" "${PROCESS_NAME}" 10001
  
  # register custom url scheme.
  WriteRegStr "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}" "URL protocol" ""
  WriteRegStr "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}\shell" "" "open"
  WriteRegStr "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}\shell\open" "" "command"
  WriteRegStr "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}\shell\open\command" "" '"$INSTDIR\${PROCESS_NAME}" "%1"'
  
FunctionEnd

;----------------------------------------------------------------------
; 설치 버전 체크. Install Sheild로 설치된 버전과 구별 필요.
Function CheckInstalledVersion
  Var /GLOBAL InstalledVersion
  Var /GLOBAL CanUpdate

  ; 설치된 버전이 설치하려는 버전보다 높은 버전인지 확인한다.
  ReadRegStr $InstalledVersion HKLM "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_InstalledVersion}"

  StrCpy $CanUpdate "False"

  ${If} $InstalledVersion == ""
    Goto Version_Check_Finish
  ${EndIf}

  ${VersionCompare} $InstalledVersion "${PRODUCT_VERSION}" $R0
/*
0	Versions are equal
1	Version 1 is newer
2	Version 2 is newer
*/
  ${If} $R0 == 1
    Goto Version_IntallStop
  ${Else}
    Goto Version_InstallContinue
  ${EndIf}

  Version_IntallStop:
    ;MSG_LAST_VERSION_CHECK_TEXT: "${PRODUCT_VERSION}보다 최신버전이 설치되어 있습니다. "
    MessageBox MB_OK|MB_ICONEXCLAMATION "$(MSG_LAST_VERSION_CHECK_TEXT) " /SD IDOK
    Abort

  Version_InstallContinue:
    StrCpy $CanUpdate "True"
    Goto Version_Check_Finish

  Version_Check_Finish:
    # Nothing...
FunctionEnd

;-----------------------------------------------------------------------------------------------------
; Welcom Text 수정.
Function WelcomeShowCallback
  Call CheckInstalledVersion

  ${If} $CanUpdate == "True"
    SendMessage $mui.WelcomePage.Title ${WM_SETTEXT} 0 "STR:$(MSG_UPDATE_WELCOME_PAGE_TITLE)"
    SendMessage $mui.WelcomePage.Text ${WM_SETTEXT} 0 "STR:$(MSG_UPDATE_WELCOME_PAGE_TEXT)"
  ${EndIf}
FunctionEnd

;-----------------------------------------------------------------------------------------------------
; Welcom Text 수정.
Function WelcomeLeaveCallback
  Call CheckProcessRuntime
FunctionEnd

;-----------------------------------------------------------------------------------------------------
; Directory Page Skip Check
Function CanDirectoryPageSkip
  ReadRegStr $0 "HKLM" "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_InstallPath}"
  ${IF} $0 != ''
    Abort
  ${EndIf}
FunctionEnd

;-----------------------------------------------------------------------------------------------------
Function FinishShowCallback
  ${If} $CanUpdate == "True"
    SendMessage $mui.FinishPage.Title ${WM_SETTEXT} 0 "STR:$(MSG_UPDATE_FINISH_PAGE_TITLE)"
    SendMessage $mui.FinishPage.Text ${WM_SETTEXT} 0 "STR:$(MSG_UPDATE_FINISH_PAGE_TEXT)"
  ${EndIf}
FunctionEnd
;-----------------------------------------------------------------------------------------------------

Var Checkbox
Var CheckState ; Stored globally so we remember the choice if the user presses the back button and goes back to our page
!define CheckHeight 28

!ifmacrondef _Z=
!error "NSIS 2.51 or 3.0rc1 or later required!"
!endif
!macro CreateNativeControl hParent cls style exstyle x y w h text ; Note: Only supports pixel coordinates
System::Call 'USER32::CreateWindowEx(i ${exstyle}, t "${cls}", ts, i ${style}, i ${x}, i ${y}, i ${w}, i ${h}, p ${hParent}, i0, i0, i0)p.s' "${text}"
!macroend

; Uninstaller 확인 페이지 내용 수정.
Function un.UnPageConfirmShow
    ;FindWindow $1 "#32770" "" $HWNDPARENT ; Find inner dialog
    ;System::Call 'USER32::CreateWindowEx(i${__NSD_CheckBox_EXSTYLE},t"${__NSD_CheckBox_CLASS}",t "$(MSG_REMOVE_USER_DATA)",i${__NSD_CheckBox_STYLE}, i0, i100, i450, i25, i$1, i0, i0, i0)i.s'
    ;Pop $0
    ;SendMessage $HWNDPARENT ${WM_GETFONT} 0 0 $1
    ;SendMessage $0 ${WM_SETFONT} $1 1
    ;SetCtlColors $0 "" ${MUI_BGCOLOR} ; This is the wrong color to use...

  ; Create some extra space by reducing the height of the top text:
  System::Call *(i,i,i,i)p.r0 ; NSIS 2.51+
  System::Call 'USER32::GetWindowRect(p$mui.DirectoryPage.Text, pr0)'
  System::Call 'USER32::MapWindowPoints(i0,p$mui.DirectoryPage,p$0,i2)'
  System::Call '*$0(i.r2,i.r3,i.r4,i.r5)'
  System::Free $0
  IntOp $5 $5 - ${CheckHeight}
  System::Call 'USER32::SetWindowPos(i$mui.DirectoryPage.Text,i,i,i,i$4,i$5,i0x6)'

  ; Create and initialize the checkbox
  IntOp $5 $3 + $5 ; y = TextTop + TextHeight

  !insertmacro CreateNativeControl $mui.UnConfirmPage ${__NSD_CheckBox_CLASS} "${__NSD_CheckBox_STYLE}" "${__NSD_CheckBox_EXSTYLE}" 0 100 450 ${CheckHeight} "$(MSG_REMOVE_USER_DATA)"
  Pop $Checkbox
  SendMessage $mui.UnConfirmPage ${WM_GETFONT} 0 0 $0 ; Get the dialog font
  SendMessage $Checkbox ${WM_SETFONT} $0 1 ; and apply it to the new control
  System::Call 'USER32::SetWindowPos(i$Checkbox,i0,i,i,i,i,i0x33)' ; Make sure it is on top of the tab order
  ${IfThen} $CheckState == "" ${|} StrCpy $CheckState 0 ${|} ; Set the default if this is our first time
  ${NSD_SetState} $Checkbox $CheckState

FunctionEnd

Function un.UnPageConfirmLeave
  ${NSD_GetState} $Checkbox $CheckState
  ${If} $CheckState <> 0
    ;MessageBox mb_ok "Checkbox checked."
  ${EndIf}
  ;MessageBox mb_ok "Checkbox CheckState: $CheckState"
FunctionEnd

; Utility Function End-----------------------------------------------------

; 설치완료후.
Function .onInstSuccess
  Call WriteRegistry
FunctionEnd

Function .onInit
  !insertmacro MUI_LANGDLL_DISPLAY

  Var /GLOBAL ProgramDataPath
  ; Retrieving CommonApplicationData path (in $1)
  System::Call "shfolder::SHGetFolderPath(i $HWNDPARENT, i 0x0023, i 0, i 0, t.r1)"
  StrCpy $ProgramDataPath "$1\$0" -1

!define STARTMENU_PROGRAM "$ProgramDataPath\Microsoft\Windows\Start Menu\Programs"

  Call CheckOS64
  Call CheckWindowsVersion
  Pop $R0

  ${If} $R0 == 'FALSE'
    MessageBox MB_OK|MB_ICONSTOP "$(MSG_REQUIRED_OS_VERSION)" /SD IDOK
    Abort
  ${EndIf}
  
  ;WelcomPage의 Next 버튼을 클릭할때, 확인하도록 변경.
  ;프로그램이 업데이트 될 때, 프로그램을 종료하면서, 셋업을 실행하면, 프로그램이 완전히 종료되기전에 셋업이 실행되는 경우가 발생.
  #Call CheckProcessRuntime
  Call CheckInstalledVersion
FunctionEnd

Section "MainSection" SEC01
  # Chcek .Net Framework version and install.
  !insertmacro CheckNetFramework 462

  Var /GLOBAL InstalledPath
  ReadRegStr $InstalledPath HKLM "${PRODUCT_REGISTRY_SUBKEY}" "${REGISTRY_REGKEY_InstallPath}"

  ${If} $CanUpdate == "True"
	RMDir /r "$LOCALAPPDATA\${COMPANY_NAME}\${PRODUCT_NAME}"
	RMDir /r "$LOCALAPPDATA\Temp\Megazone.Core.Windows.Control.VideoPlayer"
    # 현재 설치위치에 있는  설치파일을 삭제한다.
    IfFileExists "$INSTDIR" DeleteCurrentInstallPath InstallContinue
    DeleteCurrentInstallPath:
      Delete "$INSTDIR\ko-kr\Megazone.SubtitleEditor.Resources.resources.dll"
      RMDir "$INSTDIR\ko-kr"
      Delete "$INSTDIR\*.*"
      Delete "${STARTMENU_PROGRAM}\${COMPANY_NAME}\${PRODUCT_NAME}\*.*"
      RMDir "${STARTMENU_PROGRAM}\${COMPANY_NAME}\${PRODUCT_NAME}"
    InstallContinue:

  ${EndIf}

  SetOutPath "$INSTDIR"
  ;SetOverwrite try
  SetOverwrite on

  File "Install_Files\DocumentFormat.OpenXml.dll"
  File "Install_Files\FFmpeg.AutoGen.dll"
  File "Install_Files\LGPL_21.txt"
  File "Install_Files\log4net.dll"
  File "Install_Files\Megazone.Cloud.Media.Domain.dll"
  File "Install_Files\Megazone.Cloud.Media.Repository.dll"
  File "Install_Files\Megazone.Cloud.Media.Service.dll"
  File "Install_Files\Megazone.Cloud.Media.ServiceInterface.dll"
  File "Install_Files\Megazone.Core.Client.dll"
  File "Install_Files\Megazone.Core.Debug.dll"
  File "Install_Files\Megazone.Core.dll"
  File "Install_Files\Megazone.Core.IoC.Unity.dll"
  File "Install_Files\Megazone.Core.Log.Log4Net.dll"
  File "Install_Files\Megazone.Core.RestSharp.dll"
  File "Install_Files\Megazone.Core.Security.dll"
  File "Install_Files\Megazone.Core.VideoTrack.dll"
  File "Install_Files\Megazone.Core.VideoTrack.WebVtt.dll"
  File "Install_Files\Megazone.Core.VideoTrack.Xaml.dll"
  File "Install_Files\Megazone.Core.Windows.Control.Buttons.dll"
  File "Install_Files\Megazone.Core.Windows.Control.RichTextBox.dll"
  File "Install_Files\Megazone.Core.Windows.Control.Spinner.dll"
  File "Install_Files\Megazone.Core.Windows.Control.TimeSpinner.dll"
  File "Install_Files\Megazone.Core.Windows.Control.VideoPlayer.dll"
  File "Install_Files\Megazone.Core.Windows.dll"
  File "Install_Files\Megazone.Core.Windows.Pinvoke.dll"
  File "Install_Files\Megazone.Core.Windows.Wpf.Debug.dll"
  File "Install_Files\Megazone.Core.Windows.Xaml.dll"
  File "Install_Files\Megazone.HyperSubtitleEditor.Presentation.dll"
  File "Install_Files\Megazone.HyperSubtitleEditor.Presentation.Infrastructure.dll"
  File "Install_Files\Megazone.HyperSubtitleEditor.Presentation.Resource.dll"
  File "Install_Files\Megazone.SubtitleEditor.Resources.dll"
  File "Install_Files\Megazone.VideoStudio.Presentation.Common.Infrastructure.dll"
  File "Install_Files\CloudPlexMediaCaptionEditor.exe"
  File "Install_Files\Microsoft.Win32.Primitives.dll"
  File "Install_Files\Ms-PL.txt"
  File "Install_Files\NAudio.dll"
  File "Install_Files\Newtonsoft.Json.dll"
  File "Install_Files\PreferedLanguageInfo.json"
  File "Install_Files\RestSharp.dll"
  File "Install_Files\System.AppContext.dll"
  File "Install_Files\System.Console.dll"
  File "Install_Files\System.Diagnostics.DiagnosticSource.dll"
  File "Install_Files\System.Globalization.Calendars.dll"
  File "Install_Files\System.IO.Compression.dll"
  File "Install_Files\System.IO.Compression.ZipFile.dll"
  File "Install_Files\System.IO.FileSystem.dll"
  File "Install_Files\System.IO.FileSystem.Primitives.dll"
  File "Install_Files\System.IO.Packaging.dll"
  File "Install_Files\System.Net.Http.dll"
  File "Install_Files\System.Net.Sockets.dll"
  File "Install_Files\System.Runtime.CompilerServices.Unsafe.dll"
  File "Install_Files\System.Runtime.InteropServices.RuntimeInformation.dll"
  File "Install_Files\System.Security.Cryptography.Algorithms.dll"
  File "Install_Files\System.Security.Cryptography.Encoding.dll"
  File "Install_Files\System.Security.Cryptography.Primitives.dll"
  File "Install_Files\System.Security.Cryptography.X509Certificates.dll"
  File "Install_Files\System.Windows.Interactivity.dll"
  File "Install_Files\System.Xml.ReaderWriter.dll"
  File "Install_Files\Unity.Abstractions.dll"
  File "Install_Files\Unity.Container.dll"

  SetOutPath "$INSTDIR\ko-kr"
  File "Install_Files\ko-kr\Megazone.SubtitleEditor.Resources.resources.dll"

  # Create shortcut in start menu.
  CreateDirectory "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\${PROCESS_NAME}"
  CreateShortCut "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\Megazone Media Cloud.lnk" "$INSTDIR\Megazone Media Cloud.url"
  ;CreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$INSTDIR\${PROCESS_NAME}"

  # Create shortcut on desktop screen.
  # 공용으로 사용하도록 한다.
  ${ProfilePathAllUsers} $0
  CreateShortCut "$0\Public\Desktop\${PRODUCT_NAME}.lnk" "$INSTDIR\${PROCESS_NAME}"
  

  # 아이콘이 변경된 경우, 바탕화면에 반영되지 않음.
  # 원인 : 윈도우에서 사용하는 아이콘 이미지 캐쉬 정책 때문.
  # LocalAppData > IconCache.db를 삭제후 재부팅하면, 바탕화면의 아이콘은 변경된 아이콘으로 반영되지만, Window 10 > 앱 검색에서는 이전 아이콘이 보임.
SectionEnd

Section -AdditionalIcons
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  WriteIniStr "$INSTDIR\Megazone Media Cloud.url" "InternetShortcut" "URL" "${MCM_WEB_SITE}"
  ;CreateShortCut "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  ;CreateShortCut "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${PROCESS_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${PROCESS_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  WriteRegDWORD ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "EstimatedSize" 0xC5D7
SectionEnd

; Section descriptions
!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${SEC01} "Main Component"
!insertmacro MUI_FUNCTION_DESCRIPTION_END


Function un.onUninstSuccess
  HideWindow
  #MessageBox MB_ICONINFORMATION|MB_OK "$(^Name)는(은) 완전히 제거되었습니다."
  ;MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
!insertmacro MUI_UNGETLANGUAGE
  #MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "$(^Name)을(를) 제거하시겠습니까?" IDYES +2
  ;MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  ;Abort

  Call un.CheckOS64
  Call un.CheckProcessRuntime
FunctionEnd

Section Uninstall

  #바로가기 제거.
  Delete "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\Uninstall.lnk"
  Delete "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk"
  Delete "$DESKTOP\${PRODUCT_NAME}.lnk"
  RMDir /r "$SMPROGRAMS\${COMPANY_NAME}\${PRODUCT_NAME}"

  #바탕화면의 바로가기 제거.
  ${ProfilePathAllUsers} $0
  Delete "$0\Public\Desktop\${PRODUCT_NAME}.lnk"

  #Delete install files.
  Delete "$INSTDIR\Megazone Media Cloud.url"
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\ko-kr\Megazone.SubtitleEditor.Resources.resources.dll"
  
  Delete "$INSTDIR\DocumentFormat.OpenXml.dll"
  Delete "$INSTDIR\FFmpeg.AutoGen.dll"
  Delete "$INSTDIR\LGPL_21.txt"
  Delete "$INSTDIR\log4net.dll"
  Delete "$INSTDIR\Megazone.Cloud.Media.Domain.dll"
  Delete "$INSTDIR\Megazone.Cloud.Media.Repository.dll"
  Delete "$INSTDIR\Megazone.Cloud.Media.Service.dll"
  Delete "$INSTDIR\Megazone.Cloud.Media.ServiceInterface.dll"
  Delete "$INSTDIR\Megazone.Core.Client.dll"
  Delete "$INSTDIR\Megazone.Core.Debug.dll"
  Delete "$INSTDIR\Megazone.Core.dll"
  Delete "$INSTDIR\Megazone.Core.IoC.Unity.dll"
  Delete "$INSTDIR\Megazone.Core.Log.Log4Net.dll"
  Delete "$INSTDIR\Megazone.Core.RestSharp.dll"
  Delete "$INSTDIR\Megazone.Core.Security.dll"
  Delete "$INSTDIR\Megazone.Core.VideoTrack.dll"
  Delete "$INSTDIR\Megazone.Core.VideoTrack.WebVtt.dll"
  Delete "$INSTDIR\Megazone.Core.VideoTrack.Xaml.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Control.Buttons.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Control.RichTextBox.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Control.Spinner.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Control.TimeSpinner.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Control.VideoPlayer.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Pinvoke.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Wpf.Debug.dll"
  Delete "$INSTDIR\Megazone.Core.Windows.Xaml.dll"
  Delete "$INSTDIR\Megazone.HyperSubtitleEditor.Presentation.dll"
  Delete "$INSTDIR\Megazone.HyperSubtitleEditor.Presentation.Infrastructure.dll"
  Delete "$INSTDIR\Megazone.HyperSubtitleEditor.Presentation.Resource.dll"
  Delete "$INSTDIR\Megazone.SubtitleEditor.Resources.dll"
  Delete "$INSTDIR\Megazone.VideoStudio.Presentation.Common.Infrastructure.dll"
  Delete "$INSTDIR\MegazoneCloudMediaCaptionEditor.exe"
  Delete "$INSTDIR\Microsoft.Win32.Primitives.dll"
  Delete "$INSTDIR\Ms-PL.txt"
  Delete "$INSTDIR\NAudio.dll"
  Delete "$INSTDIR\Newtonsoft.Json.dll"
  Delete "$INSTDIR\PreferedLanguageInfo.json"
  Delete "$INSTDIR\RestSharp.dll"
  Delete "$INSTDIR\System.AppContext.dll"
  Delete "$INSTDIR\System.Console.dll"
  Delete "$INSTDIR\System.Diagnostics.DiagnosticSource.dll"
  Delete "$INSTDIR\System.Globalization.Calendars.dll"
  Delete "$INSTDIR\System.IO.Compression.dll"
  Delete "$INSTDIR\System.IO.Compression.ZipFile.dll"
  Delete "$INSTDIR\System.IO.FileSystem.dll"
  Delete "$INSTDIR\System.IO.FileSystem.Primitives.dll"
  Delete "$INSTDIR\System.IO.Packaging.dll"
  Delete "$INSTDIR\System.Net.Http.dll"
  Delete "$INSTDIR\System.Net.Sockets.dll"
  Delete "$INSTDIR\System.Runtime.CompilerServices.Unsafe.dll"
  Delete "$INSTDIR\System.Runtime.InteropServices.RuntimeInformation.dll"
  Delete "$INSTDIR\System.Security.Cryptography.Algorithms.dll"
  Delete "$INSTDIR\System.Security.Cryptography.Encoding.dll"
  Delete "$INSTDIR\System.Security.Cryptography.Primitives.dll"
  Delete "$INSTDIR\System.Security.Cryptography.X509Certificates.dll"
  Delete "$INSTDIR\System.Windows.Interactivity.dll"
  Delete "$INSTDIR\System.Xml.ReaderWriter.dll"
  Delete "$INSTDIR\Unity.Abstractions.dll"
  Delete "$INSTDIR\Unity.Container.dll"

  RMDir "$INSTDIR\ko-kr"
  RMDir /r "$INSTDIR"

  #Delete registry.
  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey "HKLM" "${PRODUCT_DIR_REGKEY}"
  DeleteRegKey "HKLM" "${PRODUCT_REGISTRY_SUBKEY}"
  DeleteRegKey "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}"
  DeleteRegKey "HKCR" "${CUSTOM_URL_SCHEME_REGISTRY_SUBKEY}"
  # 32bit
  DeleteRegValue "HKLM" "SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION" "${PROCESS_NAME}"
  # 64bit
  DeleteRegValue "HKLM" "SOFTWARE\WOW6432Node\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION" "${PROCESS_NAME}"
  
  # Delete user file.
  ${If} $CheckState <> 0
    Delete "$LOCALAPPDATA\${COMPANY_NAME}\${PRODUCT_NAME}\*.*"
    RMDir /r "$LOCALAPPDATA\${COMPANY_NAME}\${PRODUCT_NAME}"
  ${EndIf}

  SetAutoClose true
SectionEnd