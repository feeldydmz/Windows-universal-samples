<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:mz="http://schemas.megazone.co.kr">

    <ResourceDictionary.MergedDictionaries>
        <mz:DesignTimeResourceDictionary
            ProjectName="Megazone.HyperSubtitleEditor.Presentation"
            Source="/Megazone.HyperSubtitleEditor.Presentation;component/DesignTimeResourceDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="Brush_CommonBackground" Color="White" />
    <!--<SolidColorBrush x:Key="Brush_CommonBackground" Color="#FF323743" />-->
    <SolidColorBrush x:Key="Brush_ColumnHeaderBackground" Color="#FF262931" />
    <SolidColorBrush x:Key="Brush_ListItemBackground" Color="#FFf2f4f7" />
    <SolidColorBrush x:Key="Brush_ListLineBackground" Color="#FF42444d" />

    <!--비디오스튜디오에서 생성-->
    <SolidColorBrush x:Key="Brush_HeaderAreaBrush" Color="White" />
    <SolidColorBrush x:Key="Brush_HeaderTextForeground" Color="#FF5fa5f0" />
    <SolidColorBrush x:Key="Brush_HeaderLineBrush" Color="#FFbec4ce" />
    <SolidColorBrush x:Key="Brush_HeaderAreaBackBrush" Color="#FFf5f7fa" />


    <!--성공 등의 녹색 컬러-->
    <SolidColorBrush x:Key="Brush_GreenForeground" Color="#FF39b966" />
    <!--실패 등의 레드 컬러-->
    <SolidColorBrush x:Key="Brush_RedForeground" Color="#FFbf504b" />
    <!--'대기 중' 문구나 '/' 등에서 사용되는 눈에띄지 않는 컬러-->
    <SolidColorBrush x:Key="Brush_GrayForeground" Color="#FF9ca2b2" />
    <!--불일치 등에 사용되는 노란색 컬러-->
    <SolidColorBrush x:Key="Brush_YellowForeground" Color="#FFfaaf50" />

    <!--팝업 등 서브헤더에서 사용되는 글자의 Foreground-->
    <SolidColorBrush x:Key="Brush_PopupForeground" Color="Black" />
    <SolidColorBrush x:Key="Brush_PopupForegroundDimmed" Color="#FF7b85a2" />

    <!--팝업 등 하단의 버튼영역 BG-->
    <SolidColorBrush x:Key="Brush_BottomButtonAreaBorder" Color="#FFc6cbd3" />
    <SolidColorBrush x:Key="Brush_BottomButtonAreaBackground" Color="#FFffffff" />

    <!--세퍼레이터 등에 사용되는 검은색 라인-->
    <SolidColorBrush x:Key="Brush_SepratorLineBlack" Color="#FFbec4ce" />

    <SolidColorBrush x:Key="PopupSubHeaderAreaBackground" Color="LightGray" />

    <!--기본 텍스트 Foreground-->
    <SolidColorBrush x:Key="Brush_CommonForeground" Color="Black" />
    <!--약간 덜 희미한 흰색 Foreground. ComboBox나 프로필 팝업 등에서 사용-->
    <SolidColorBrush x:Key="Brush_MinorWhiteeForeground" Color="#FF697382" />
    <!--팝업의 오류 텍스트, 잔여 작업목록 수 등에서 Foreground로 사용되거나 포인트 라인등에서 사용되는 포인트컬러-->
    <SolidColorBrush x:Key="Brush_PointColor" Color="#FF5fa5f0" />

    <!--탭 형태의 라디오버튼과 그 주변의 라인에서 사용되는 컬러-->
    <SolidColorBrush x:Key="Brush_TabLineColor" Color="#FF3d414d" />
    <SolidColorBrush x:Key="Brush_TabTextShadowColor" Color="#FF1c1c1f" />

    <!--말풍선에서 보여지는 텍스트의 Foreground-->
    <SolidColorBrush x:Key="Brush_SpeechBallooneForeground" Color="#FF373636" />

    <!--2라인 세퍼레이터나 버튼의 테두리 등에서 사용되는 보더색상-->
    <SolidColorBrush x:Key="Brush_BlackBorderBrush" Color="#FF1a1d24" />
    <SolidColorBrush x:Key="Brush_LighterBlackBorderBrush" Color="#FF45484f" />

    <SolidColorBrush x:Key="Brush_GrayBoxBorderBrush" Color="#FFa0a8b6" />
    <SolidColorBrush x:Key="Brush_LightGraySeparatorLineBrush" Color="#FFd8dce2" />


    <SolidColorBrush x:Key="Brush_Button_Background_Base_Color" Color="#282f39" />
    <SolidColorBrush x:Key="Brush_Button_Foreground_Base_Color" Color="#b0b7d5" />
    <SolidColorBrush x:Key="Brush_Button_MouseHover_Color" Color="#323a46" />
    <SolidColorBrush x:Key="Brush_Button_Actvie_Border_Color" Color="#404d6c" />

    <!--배지 컬러-->
    <SolidColorBrush x:Key="Brush_Badge_Video_Color" Color="#405fff" />
    <SolidColorBrush x:Key="Brush_Badge_Caption_Color" Color="#5a4a3f" />

    <GridLength x:Key="GridLength_HeaderAreaHeight">40</GridLength>

    <Thickness x:Key="Thickness_TabAreaTopPadding">0,4,0,0</Thickness>

    <!--메뉴의 MinWidth-->
    <system:Double x:Key="Double_MenuMinWidth">170</system:Double>

    <!--프리셋 목록 아이템 하나의 높이-->
    <system:Double x:Key="Double_PresetItemHeight">26</system:Double>

    <!--버튼 포커스 비주얼 스타일-->
    <Style x:Key="Style_DefaultFocusVisual" TargetType="{x:Type Control}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border BorderBrush="{DynamicResource Brush_PointColor}" BorderThickness="1" CornerRadius="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--그리드 스플리터 - 가로-->
    <Style x:Key="Style_GridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#FFbec4ce" />
        <Setter Property="PreviewStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Height" Value="7" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Image Stretch="None" Opacity="0.6" Margin="0,0,1,0"
                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_HorizontalSplitterThumb.png" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFfdfdff" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="#FFfbfbfb" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--그리드 스플리터 - 세로-->
    <Style x:Key="Style_VerticalGridSplitter" TargetType="{x:Type GridSplitter}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#FFbec4ce" />
        <Setter Property="PreviewStyle" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1,0" />
        <Setter Property="Width" Value="7" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Image Stretch="None" Opacity="0.6"
                                   Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_VerticalSplitterThumb.png" />
                        </Border>
                        <Rectangle Fill="#FFf2f3f5" Width="1" HorizontalAlignment="Right" Margin="0,0,1,0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFfdfdff" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Background" Value="#FFfbfbfb" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--세로 스프리터인데 슬림한 형-->
    <Style x:Key="Style_VerticalGridSplitterSlim" TargetType="{x:Type GridSplitter}"
           BasedOn="{StaticResource Style_VerticalGridSplitter}">
        <Setter Property="Width" Value="8" />
    </Style>

    <!--무지개색 ProgressBar-->
    <Style x:Key="Style_DefaultProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground">
            <Setter.Value>
                <ImageBrush
                    ImageSource="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_ProgressBackground.png" />
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="#FF5e636f" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource Style_DefaultProgressBar}" />

    <!--실패난 상황에서 보여지는 빨간 프로그레스 바-->
    <Style x:Key="Style_FailedProgressBar" TargetType="{x:Type ProgressBar}"
           BasedOn="{StaticResource Style_DefaultProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_RedForeground}" />
    </Style>

    <!--사용자가 취소한 상황에서 보여지는 회색 프로그레스 바-->
    <Style x:Key="Style_CanceledProgressBar" TargetType="{x:Type ProgressBar}"
           BasedOn="{StaticResource Style_DefaultProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource Brush_GrayForeground}" />
    </Style>

    <!--컨텍스트 버튼 팝업에서 보여지는 Border의 스타일-->
    <Style x:Key="Style_PopupRootBorder" TargetType="{x:Type Border}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderBrush" Value="#FF6e737d" />
        <Setter Property="Background" Value="White" />
        <Setter Property="MinWidth" Value="{DynamicResource Double_MenuMinWidth}" />
        <Setter Property="Padding" Value="0" />
        <Style.Resources>
            <Style TargetType="{x:Type Separator}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Margin" Value="22,2,2,2" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <StackPanel>
                                <Rectangle Fill="#FFd6d7d9" Height="1" />
                                <!--<Rectangle Fill="#FFfcfcfc" Height="1" />-->
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="#FF333333" />
                <Setter Property="Padding" Value="22,3,3,3" />
                <Setter Property="Margin" Value="0,1" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" CornerRadius="2">
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Brush_PointColor}" />
                                    <Setter Property="Foreground" Value="White" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Brush_PointColor}" />
                                    <Setter Property="Foreground" Value="White" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#FF4b8fd8" />
                                    <Setter Property="Foreground" Value="White" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.3" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type CheckBox}">
                <Setter Property="UseLayoutRounding" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="#FF333333" />
                <Setter Property="Margin" Value="0,1" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="MinHeight" Value="20" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="4,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Border Background="{TemplateBinding Background}" CornerRadius="2">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="20" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="PART_CheckArea" Margin="0,0,4,0">
                                        <Path x:Name="PART_Check" Opacity="0.25" Margin="-3,1,3,0"
                                              Data="M84.934615,78.840278 L95,87 115.8869,69.375"
                                              Height="7" Width="8" HorizontalAlignment="Center"
                                              VerticalAlignment="Center" Stretch="Fill" Stroke="Black"
                                              StrokeThickness="2" UseLayoutRounding="True" SnapsToDevicePixels="True"
                                              StrokeStartLineCap="Round" StrokeEndLineCap="Round"
                                              StrokeLineJoin="Round" />
                                    </Border>
                                    <ContentPresenter Grid.Column="1"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource Brush_PointColor}" />
                                    <Setter Property="Foreground" Value="{DynamicResource Brush_CommonForeground}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#FF4b8fd8" />
                                    <Setter Property="Foreground" Value="{DynamicResource Brush_CommonForeground}" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Opacity" Value="1" TargetName="PART_Check" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.3" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </Style.Resources>
    </Style>

    <!--<Style x:Key="Style_ShadowedTextLabel" TargetType="{x:Type Label}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource Brush_PopupForeground}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <TextBlock Text="{TemplateBinding Content}" Foreground="Black" Opacity="0.5" Margin="0,-1,0,1" />
                        <TextBlock Text="{TemplateBinding Content}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <!--Indeterminate 용 Dim 처리 Control. ProgressBar 대신 사용
    Loaded/Unload 가 아닌 Visiblity가 Visible 될때/되지 않을 때로 애니메이션 재생/해제-->
    <Style x:Key="Style_IndeterminateControl" TargetType="{x:Type Control}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="#19000000" />
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Storyboard_Visible" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="LeftTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="LeftTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="RightTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="LeftBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="RightBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="RightTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="LeftBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="RightBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.7">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                Storyboard.TargetName="LeftTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                Storyboard.TargetName="LeftTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                Storyboard.TargetName="RightTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                Storyboard.TargetName="RightTop">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                Storyboard.TargetName="LeftBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                Storyboard.TargetName="LeftBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                Storyboard.TargetName="RightBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                Storyboard.TargetName="RightBottom">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-6">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Storyboard_Rotate" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
                                Storyboard.TargetName="Container">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="90">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="90">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:1.2" Value="180">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="180">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:2.0" Value="270">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:2.4" Value="270">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:2.8" Value="360">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:3.2" Value="360">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseInOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}">
                        <Grid x:Name="Container" Width="38" Height="38" HorizontalAlignment="Center"
                              VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Ellipse x:Name="LeftTop" Fill="#FFff5019" Width="14" Height="14"
                                     RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="RightTop" Fill="#FF666e7a" Width="14" Height="14"
                                     RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Right"
                                     VerticalAlignment="Top">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="LeftBottom" Fill="#FF5bce60" Width="14" Height="14"
                                     RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left"
                                     VerticalAlignment="Bottom">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                            <Ellipse x:Name="RightBottom" Fill="#FF5fa5f0" Width="14" Height="14"
                                     RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Right"
                                     VerticalAlignment="Bottom">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Visibility" Value="Visible">
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Storyboard_Visible_BeginStoryboard" />
                                <StopStoryboard BeginStoryboardName="Storyboard_Rotate_BeginStoryboard" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Storyboard_Visible_BeginStoryboard"
                                                 Storyboard="{StaticResource Storyboard_Visible}" />
                                <BeginStoryboard x:Name="Storyboard_Rotate_BeginStoryboard"
                                                 Storyboard="{StaticResource Storyboard_Rotate}" />
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--실제 Indeterminate 속성을 사용하며 ProgressBar로 대체되어 생긴 스타일-->
    <Style x:Key="Style_IndeterminateProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground">
            <Setter.Value>
                <ImageBrush
                    ImageSource="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Progress_Foreground.png" />
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="2" />
        <Setter Property="Background" Value="#FF2387f5" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                            Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames
                                            Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)"
                                            Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-1,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="2,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:3.5" Value="2,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                        <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:3.5" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:3.5" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>-->
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Rectangle x:Name="PART_Track" />
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}"
                                       RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--링크 등에서 필요한 리치텍스트박스-->
    <Style x:Key="Style_RichTextBoxDefault" TargetType="{x:Type RichTextBox}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Hyperlink}">
                            <!--<Setter Property="Foreground" Value="SkyBlue" />-->
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!--<Setter Property="Foreground" Value="AliceBlue" />-->
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Padding="{TemplateBinding Padding}"
                                      Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                                      VerticalScrollBarVisibility="Hidden" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--리피터(스피너)의 기본 스타일-->
    <Style x:Key="Style_SpinContrilDefault" TargetType="{x:Type mz:Spinner}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="114" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type mz:Spinner}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBox Grid.ColumnSpan="2"
                                 Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Value,Mode=TwoWay}">
                            <TextBox.Style>
                                <Style TargetType="{x:Type TextBox}">
                                    <Setter Property="UseLayoutRounding" Value="True" />
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="FocusVisualStyle"
                                            Value="{DynamicResource Style_DefaultFocusVisual}" />
                                    <Setter Property="MinHeight" Value="24" />
                                    <Setter Property="Background" Value="#FFffffff" />
                                    <Setter Property="BorderBrush" Value="#FFa4acb9" />
                                    <Setter Property="Foreground" Value="{DynamicResource Brush_MinorWhiteeForeground}" />
                                    <Setter Property="BorderThickness" Value="1" />
                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                                    <Setter Property="HorizontalContentAlignment" Value="Right" />
                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                    <Setter Property="Padding" Value="7,2,28,2" />
                                    <Setter Property="SelectionBrush" Value="#FF75adea" />
                                    <Setter Property="SelectionOpacity" Value="0.5" />
                                    <Setter Property="CaretBrush" Value="#FFccd9e9" />
                                    <Setter Property="AllowDrop" Value="true" />
                                    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                                    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <Border x:Name="RootBorder" BorderBrush="{TemplateBinding BorderBrush}"
                                                        CornerRadius="2"
                                                        BorderThickness="{TemplateBinding BorderThickness}"
                                                        Background="{TemplateBinding Background}"
                                                        SnapsToDevicePixels="True">
                                                    <Grid>
                                                        <Border x:Name="InnerBorder" CornerRadius="1"
                                                                BorderBrush="Black" Opacity="0.15"
                                                                BorderThickness="1,1,0,0">
                                                            <Border x:Name="LastBorder" CornerRadius="1"
                                                                    BorderBrush="Black" Opacity="0.08"
                                                                    BorderThickness="1,1,0,0" />
                                                        </Border>
                                                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                                                      BorderThickness="0"
                                                                      Background="Transparent"
                                                                      HorizontalScrollBarVisibility="Hidden"
                                                                      VerticalScrollBarVisibility="Hidden" />
                                                    </Grid>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsFocused" Value="True">
                                                        <Setter Property="BorderBrush" Value="#FF5fa5f0" />
                                                        <Setter Property="BorderBrush" Value="Black"
                                                                TargetName="InnerBorder" />
                                                        <Setter Property="Background" Value="#FFffffff" />
                                                        <Setter Property="Foreground" Value="#FF222222" />
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsFocused" Value="False" />
                                                            <Condition Property="IsMouseOver" Value="True" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="BorderBrush" Value="Black"
                                                                TargetName="InnerBorder" />
                                                        <Setter Property="Background" Value="#FFf5f7fa" />
                                                    </MultiTrigger>
                                                    <Trigger Property="IsKeyboardFocused" Value="true">
                                                        <!--focus visual로 대체-->
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Opacity" TargetName="PART_ContentHost"
                                                                Value="0.8" />
                                                        <Setter Property="Opacity" Value="0.5" />
                                                    </Trigger>
                                                    <Trigger Property="IsReadOnly" Value="True">
                                                        <Setter Property="Background" Value="#FFFAFAFA" />
                                                        <Setter Property="Foreground" Value="Gray" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                                                <Condition Property="IsSelectionActive" Value="false" />
                                            </MultiTrigger.Conditions>
                                            <Setter Property="SelectionBrush"
                                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                                        </MultiTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                            <i:Interaction.Behaviors>
                                <mz:NumericTextBoxBehavior
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Value,Mode=TwoWay}"
                                    AllowDecimalPoint="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=AllowDecimalPoint, Mode=TwoWay}"
                                    Minimum="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Minimum,Mode=TwoWay}"
                                    Maximum="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Maximum,Mode=TwoWay}" />
                            </i:Interaction.Behaviors>
                        </TextBox>

                        <Grid Grid.Column="1">
                            <Grid.Resources>
                                <Style x:Key="Style_SpinControlButtonBase" TargetType="{x:Type RepeatButton}">
                                    <Setter Property="UseLayoutRounding" Value="True" />
                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="BorderBrush" Value="{x:Null}" />
                                    <Setter Property="BorderThickness" Value="0" />
                                    <Setter Property="HorizontalContentAlignment" Value="Center" />
                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                    <Setter Property="FocusVisualStyle"
                                            Value="{DynamicResource Style_DefaultFocusVisual}" />
                                    <Setter Property="Padding" Value="0" />
                                </Style>
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <RepeatButton Grid.Row="0"
                                          Command="{x:Static mz:Spinner.IncreaseCommand}">
                                <RepeatButton.Style>
                                    <Style TargetType="{x:Type RepeatButton}"
                                           BasedOn="{StaticResource Style_SpinControlButtonBase}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Grid Background="{TemplateBinding Background}">
                                                        <Image x:Name="PART_Normal" Stretch="None"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_UpArrow_Normal.png" />
                                                        <Image x:Name="PART_Over" Stretch="None" Visibility="Collapsed"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_UpArrow_Over.png" />
                                                        <Image x:Name="PART_Pressed" Stretch="None"
                                                               Visibility="Collapsed"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_UpArrow_Down.png" />
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"
                                                                    TargetName="PART_Normal" />
                                                            <Setter Property="Visibility" Value="Visible"
                                                                    TargetName="PART_Over" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"
                                                                    TargetName="PART_Normal" />
                                                            <Setter Property="Visibility" Value="Visible"
                                                                    TargetName="PART_Pressed" />
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.3" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </RepeatButton.Style>
                            </RepeatButton>
                            <RepeatButton Grid.Row="1" Margin="0,-1,0,0"
                                          Command="{x:Static mz:Spinner.DecreaseCommand}">
                                <RepeatButton.Style>
                                    <Style TargetType="{x:Type RepeatButton}"
                                           BasedOn="{StaticResource Style_SpinControlButtonBase}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                    <Grid Background="{TemplateBinding Background}">
                                                        <Image x:Name="PART_Normal" Stretch="None"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_DownArrow_Normal.png" />
                                                        <Image x:Name="PART_Over" Stretch="None" Visibility="Collapsed"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_DownArrow_Over.png" />
                                                        <Image x:Name="PART_Pressed" Stretch="None"
                                                               Visibility="Collapsed"
                                                               Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_Spin_DownArrow_Down.png" />
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"
                                                                    TargetName="PART_Normal" />
                                                            <Setter Property="Visibility" Value="Visible"
                                                                    TargetName="PART_Over" />
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Visibility" Value="Collapsed"
                                                                    TargetName="PART_Normal" />
                                                            <Setter Property="Visibility" Value="Visible"
                                                                    TargetName="PART_Pressed" />
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.3" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </RepeatButton.Style>
                            </RepeatButton>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type mz:Spinner}" BasedOn="{StaticResource Style_SpinContrilDefault}" />

    <!--설정 등에서 사용되는 슬라이더 스타일-->

    <Style x:Key="Style_SliderDefault" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Foreground" Value="Green" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Track x:Name="PART_Track" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Focusable="False">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="Transparent">
                                                    <Border Background="#FF5fa5f0" Height="4" />
                                                </Border>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Focusable="False">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="Transparent">
                                                    <Border Background="#FFd9dde4" Height="4" />
                                                </Border>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Focusable="False" Height="16" OverridesDefaultStyle="True"
                                           VerticalAlignment="Center" Width="16" Margin="-4,0">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="Transparent">
                                                    <Image Stretch="None"
                                                           Source="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_SliderThumb.png" />
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True" />
                                                    <Trigger Property="IsDragging" Value="True" />
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource Style_SliderDefault}" />

    <Style x:Key="Style_Slider_ProjectSelect" TargetType="{x:Type Slider}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Foreground" Value="#788296" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Track x:Name="PART_Track" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Focusable="False">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="Transparent">
                                                    <Border Background="#788296" Height="1" />
                                                </Border>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Focusable="False">
                                        <RepeatButton.Template>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border Background="Transparent">
                                                    <Border Background="#788296" Height="1" />
                                                </Border>
                                            </ControlTemplate>
                                        </RepeatButton.Template>
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Focusable="False" Height="16" OverridesDefaultStyle="True"
                                           VerticalAlignment="Center" Width="46" Margin="-4,0">
                                        <Thumb.Template>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Rectangle Width="{Binding}" Height="4" Fill="#788296"/>
                                                <!--<ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True" />
                                                    <Trigger Property="IsDragging" Value="True" />
                                                </ControlTemplate.Triggers>-->
                                            </ControlTemplate>
                                        </Thumb.Template>
                                    </Thumb>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--팝업에서 컨텐츠 영역을 감싸는 보더의 스타일-->
    <Style x:Key="Style_PopupContentAreaBorder" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="20" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#FFd8dce2" Offset="0" />
                    <GradientStop Color="#30a0a8b6" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <!--팝업에서 하단 버튼영역을 감싸는 보더의 스타일-->
    <Style x:Key="Style_PopupBottomButtonAreaBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_BottomButtonAreaBorder}" />
        <Setter Property="Background" Value="{DynamicResource Brush_BottomButtonAreaBackground}" />
        <Setter Property="Grid.Row" Value="10" />
        <Setter Property="Grid.ColumnSpan" Value="10" />
    </Style>

    <!--리스트 영역 등에서 보여지는 그림자 Border-->
    <Style x:Key="Style_ShadowBorder" TargetType="{x:Type Border}">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="#28a0a8b6" />
        <Setter Property="BorderThickness" Value="0,0,0,2" />
    </Style>

    <Style x:Key="Style_VideoBadgeImage" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_badge_video.png" />
        <Setter Property="Stretch" Value="None" />
    </Style>
    <Style x:Key="Style_CaptionBadgeImage" TargetType="Image">
        <Setter Property="Source" Value="pack://application:,,,/Megazone.HyperSubtitleEditor.Presentation.Resource;component/Image/img_badge_caption.png" />
        <Setter Property="Stretch" Value="None" />
    </Style>


    <!--하이퍼링크 기본스타일. 색상 지정과 언더라인 정도-->
    <Style x:Key="Style_HyperlinkDefault" TargetType="{x:Type Hyperlink}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Foreground" Value="#FF8ea7ce" />
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#FF9eb8df" />
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource Style_HyperlinkDefault}" />

    <Style x:Key="Style_NoticeHyperlink" TargetType="{x:Type Hyperlink}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource Style_DefaultFocusVisual}" />
        <Setter Property="Foreground" Value="#FF95b0d9" />
        <Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="#FF5fa5f0" />
                <Setter Property="TextBlock.TextDecorations" Value="Underline" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>